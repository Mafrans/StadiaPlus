class NetworkMonitor {
    originalRTC = [];
    peerConnections = [];
    timer = 0;

    constructor() {
        const self = this;
        this.originalRTC = RTCPeerConnection;
        (function (OriginalRTCConnection) {
            self.originalRTC = OriginalRTCConnection;

            RTCPeerConnection = function (args) {
                const connection = new OriginalRTCConnection(args);
                self.peerConnections.push(connection);
                return connection;
            };
            RTCPeerConnection.prototype = OriginalRTCConnection.prototype;
        }(RTCPeerConnection));
    }

    start() {
        if (this.timer === 0) {
            this.timer = setInterval(this.poll.bind(this), 1000);
            console.log(this);
        }
    }

    stop() {
        if (this.timer !== 0) {
            clearInterval(this.timer);
            this.timer = 0;
        }
    }

    async poll() {
        console.log('poll');
        if (!this.peerConnections) return;

        const data = [];
        for (const connection of this.peerConnections.filter(it => it.connectionState === 'connected')) {
            data.push(Array.from(await connection.getStats()));
        }

        window.postMessage({
            source: "StadiaPlusNetworkMonitor",
            stats: data
        }, "*");
    }
}

window.StadiaPlusNetworkMonitor = new NetworkMonitor();
